c
s
c
s
c
n
s
c
n
undisplay 20
n
undisplay 18
undisplay 18n
undisplay 17
n
undisplay 16
n
display end_pos
s
c
s
c
n
s
display [start...(start + end_pos)]
display symm_subs
display substr
display (2..(self.length - start)).to_a
display self
display start
c
undisplay
c
display (2..(self.length - start_pos)).to_a
undisplay
undisplay (2..(self.length - start_pos)).to_a
c
f
--help
display start
n
s
c
n
display [start...(start+end_pos)]
display (start + end_pos)
n
s
c
n
c
n
c
n
display (2..(self.length - start_pos)).to_a
display end_pos
display start_pos
display substr
display symm_subs
c
!!!
n
c
n
c
n
s
c
n
nn
n
s
c
n
s
c
n
display substr
display end_pos
display (2..(self.length - start)).to_a
display self
display symm_subs
c
n
c
n
c
n
c
n
c
n
s
n
c
n
s
n
c
n
s
n
s
n
c
n
display key_index
display next_key_char
display length
display key
display string
c
!!!
n
display key_index
dislpay key_index
display nex_key_char
display length
display key
display string
c
n
s
display num
display i 
display [num]
display [i]
c
n
s
display [i]
display i 
display [num]
display num
c
n
s
n
display self
s
n
s
n
s
n
c
n
s
n
s
n
s
n
display zipped 
display array[i]
display array
display self[i]
display subzip 
display i 
c
n
c
n
display sorted[length / 2 - 1]
display sorted[length/2]
sorted[length/2]
length
display sorted
c
n
display sorted[length/2]
diplay sorted[length/2]
n
display (sorted[length/2] + sorted[length/2-1]).fdiv(2)
display length
display sorted
c
!!!
c
cc
c
n
display search_res
display mid
!!!
pry
!!!
c
n
display mid
display search_res
c
n
s
n
s
n
display my_bsearch(target)
display mid
display self.take(mid)
display self.take(mid).my_bsearch(target)
c
n
display self[mid] <=> target
self[mid] <=> target
n
display mid
display size
n
display self.take(mid).my_bsearch(target)
c
clear
!!!
display size
c
n
display digits[num % b]
digits[num % b]
n
display base_converter(num/b, b) 
base_converter(num/b, b) + digits[num % b]
s
n
display digits
display b
